import streamlit as st
import pandas as pd
from eco_lec_sales import process_data
from first_second_first import create_pivot_tables, month_order
from source import generate_source_pivots
from region import generate_region_period_pivot
from tashkent import generate_tashkent_pivot, generate_tashkent_sum_sip_pivot
from tashkent import generate_tashkent_divided_pivot, generate_tashkent_sum_sip_divided_pivot
from tashkent_oblast import generate_other_districts_divided_pivot, generate_other_districts_pivot
from tashkent_oblast import generate_other_districts_sum_sip_divided_pivot, generate_other_districts_sum_sip_pivot
from mp import calculate_excluded_mp_pivot, calculate_mp_pivot_with_tashkent
from stocks import calculate_source_pivot
import seaborn as sns
import matplotlib.pyplot as plt
import io
from heatmap import calculate_district_heatmap, month_order, mp_district_mapping

st.set_page_config(layout="wide")
st.markdown(
    "<h1 style='text-align: center; color: #2E7D32; font-size: 100px; font-family: Montserrat, sans-serif;'>- Heel</h1>",
    unsafe_allow_html=True
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel", type=["xlsx", "csv"])
if not uploaded_file:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")
    st.stop()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É —Ç–∞ –∞—Ä–∫—É—à—ñ–≤
if uploaded_file.name.endswith(".xlsx"):
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Excel-—Ñ–∞–π–ª —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–∫—É—à—ñ
    excel_file = pd.ExcelFile(uploaded_file)
    sheet_names = excel_file.sheet_names  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∞—Ä–∫—É—à—ñ–≤
    sales_df = None
    stocks_df = None

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ä–∫—É—à—ñ–≤ "–ü—Ä–æ–¥–∞–∂–∏" —Ç–∞ "–°—Ç–æ–∫–∏"
    if "–ü—Ä–æ–¥–∞–∂–∏" in sheet_names:
        sales_df = pd.read_excel(uploaded_file, sheet_name="–ü—Ä–æ–¥–∞–∂–∏")
    if "–°—Ç–æ–∫–∏" in sheet_names:
        stocks_df = pd.read_excel(uploaded_file, sheet_name="–°—Ç–æ–∫–∏")

    # –Ø–∫—â–æ –∞—Ä–∫—É—à "–ü—Ä–æ–¥–∞–∂–∏" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if sales_df is None:
        st.warning("–ê—Ä–∫—É—à '–ü—Ä–æ–¥–∞–∂–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ Excel.")
        st.stop()
else:
    # –Ø–∫—â–æ —Ñ–∞–π–ª CSV, –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤
    sales_df = pd.read_csv(uploaded_file)
    stocks_df = None

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–†–µ–≥–∏–æ–Ω—ã"
required_columns = ['—Ä–µ–≥–∏–æ–Ω', '—Ä–∞–π–æ–Ω', '–ø–µ—Ä–∏–æ–¥', '–∫–æ–ª-–≤–æ', '–°—É–º–º–∞ –°–ò–ü', '–∏—Å—Ç–æ—á–Ω–∏–∫']
missing_columns = [col for col in required_columns if col not in sales_df.columns]
if missing_columns:
    st.error(f"–£ –∞—Ä–∫—É—à—ñ '–ü—Ä–æ–¥–∞–∂–∏' –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
    st.stop()

# –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö —ñ–∑ –∞—Ä–∫—É—à–∞ "–ü—Ä–æ–¥–∞–∂–∏"
filtered_df, pivot_qty, pivot_sum, used_months = process_data(sales_df)

if filtered_df is None:
    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –¥–∂–µ—Ä–µ–ª–∞ '–ü–µ—Ä–≤–∏—á–∫–∞' –≤ –∞—Ä–∫—É—à—ñ '–ü—Ä–æ–¥–∞–∂–∏'.")
    st.stop()

# –û–Ω–æ–≤–ª—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏, –¥–æ–¥–∞—é—á–∏ –≤–∫–ª–∞–¥–∫—É "–î–∞–Ω—ñ —Å—Ç–æ–∫—ñ–≤"
tabs = st.tabs([
    "üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂",
    "üìã –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–æ–≤",
    "üìà –û—Å—Ç–∞—Ç–∫–∏",
    "üìà –ü–µ—Ä–≤–∏—á–∫–∞ + –≤—Ç–æ—Ä–∏—á–∫–∞ - –ø–µ—Ä–≤–∏—á–∫–∞",
    "üìà –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
    "üåê Eco Lec –ø—Ä–æ–¥–∞–∂–∏",
    "üìà –†–µ–≥–∏–æ–Ω—ã",
    "üìä –¢–∞—à–∫–µ–Ω—Ç",
    "üìä –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "üìà –ú–ü",
    "üåÜ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º"
    
])

# –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤
with tabs[0]:
    st.markdown("### –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏")
    st.dataframe(sales_df, use_container_width=True)

# –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –¥–∞–Ω–∏—Ö —Å—Ç–æ–∫—ñ–≤
with tabs[1]:
    st.markdown("### –î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏")
    if stocks_df is not None:
        st.dataframe(stocks_df, use_container_width=True)
    else:
        st.warning("–ê—Ä–∫—É—à '–°—Ç–æ–∫–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ Excel.")
        
with tabs[2]:
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–°—Ç–æ–∫–∏)")
    
    if stocks_df is None:
        st.warning("–ê—Ä–∫—É—à '–°—Ç–æ–∫–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ Excel.")
        st.stop()

    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', '–ø–µ—Ä–∏–æ–¥', '–∏—Å—Ç–æ—á–Ω–∏–∫', '–∫–æ–ª-–≤–æ', '–°—É–º–º–∞ –°–ò–ü']
    missing_columns = [col for col in required_columns if col not in stocks_df.columns]
    if missing_columns:
        st.error(f"–£ –∞—Ä–∫—É—à—ñ '–°—Ç–æ–∫–∏' –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        st.stop()
    
    # –í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫–∞
    value_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å",
        options=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞ –°–ò–ü"],
        key="stocks_value_type_radio",
        horizontal=True
    )
    value_column = '–∫–æ–ª-–≤–æ' if value_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" else '–°—É–º–º–∞ –°–ò–ü'
    
    # –í–∏–±—ñ—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    filtered_df = stocks_df.copy()
    filtered_df['–ø–µ—Ä–∏–æ–¥'] = pd.Categorical(filtered_df['–ø–µ—Ä–∏–æ–¥'], categories=month_order, ordered=True)
    filtered_df[value_column] = pd.to_numeric(filtered_df[value_column], errors='coerce').fillna(0)
    used_months = sorted(
        filtered_df[filtered_df[value_column] > 0]['–ø–µ—Ä–∏–æ–¥'].dropna().unique(),
        key=lambda x: month_order.index(x)
    )
    period_labels = ['–í—Å–µ'] + used_months
    
    if not used_months:
        st.warning(f"–ù–µ–º–∞—î –Ω–µ–Ω—É–ª—å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ '{value_type}' —É –∞—Ä–∫—É—à—ñ '–°—Ç–æ–∫–∏'.")
        st.stop()
    
    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="stocks_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]
    
    # –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞
    source_list = stocks_df['–∏—Å—Ç–æ—á–Ω–∏–∫'].dropna().unique().tolist()
    source_list.sort()
    source_list.insert(0, "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    
    selected_source = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫",
        options=source_list,
        key="stocks_source_selectbox"
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    if selected_source == "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏":
        for source in source_list[1:]:
            st.markdown(f"{source}")
            pivot_table = calculate_source_pivot(stocks_df, source, selected_period, value_column=value_column)
            if pivot_table.empty:
                st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            else:
                styled_table = pivot_table.style.format("{:,.0f}", na_rep='').set_properties(**{
                    'text-align': 'right',
                    'font-size': '14px'
                }).set_properties(**{
                    'font-weight': 'bold',
                    'background-color': '#f0f0f0'
                }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
                    'font-weight': 'bold',
                    'background-color': '#f0f0f0'
                }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])
                st.dataframe(styled_table, use_container_width=True, height=(len(pivot_table) + 1) * 35 + 3)
    else:
        st.markdown(f"#### {selected_source}")
        pivot_table = calculate_source_pivot(stocks_df, selected_source, selected_period, value_column=value_column)
        if pivot_table.empty:
            st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        else:
            styled_table = pivot_table.style.format("{:,.0f}", na_rep='').set_properties(**{
                'text-align': 'right',
                'font-size': '14px'
            }).set_properties(**{
                'font-weight': 'bold',
                'background-color': '#f0f0f0'
            }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
                'font-weight': 'bold',
                'background-color': '#f0f0f0'
            }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])
            st.dataframe(styled_table, use_container_width=True, height=(len(pivot_table) + 1) * 35 + 3)        

# –í–∫–ª–∞–¥–∫–∞ "–ü–µ—Ä–≤–∏—á–∫–∞ + –≤—Ç–æ—Ä–∏—á–∫–∞ - –ø–µ—Ä–≤–∏—á–∫–∞"
with tabs[3]:
    filtered_df = sales_df.copy()
    filtered_df['–ø–µ—Ä–∏–æ–¥'] = pd.Categorical(filtered_df['–ø–µ—Ä–∏–æ–¥'], categories=month_order, ordered=True)
    filtered_df['–∫–æ–ª-–≤–æ'] = pd.to_numeric(filtered_df['–∫–æ–ª-–≤–æ'], errors='coerce').fillna(0)
    used_months = sorted(
        filtered_df[filtered_df['–∫–æ–ª-–≤–æ'] > 0]['–ø–µ—Ä–∏–æ–¥'].dropna().unique(),
        key=lambda x: month_order.index(x)
    )
    period_labels = ['–í—Å–µ'] + used_months

    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="items_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    pivot_qty_no_filter, pivot_sum_no_filter, used_months_no_filter = create_pivot_tables(sales_df, selected_period)

    styled_qty_no_filter = pivot_qty_no_filter.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    styled_sum_no_filter = pivot_sum_no_filter.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.markdown("### –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    st.dataframe(styled_qty_no_filter, use_container_width=True, height=(len(pivot_qty_no_filter) + 1) * 35 + 3)

    st.markdown("### –°—É–º–º–∞")
    st.dataframe(styled_sum_no_filter, use_container_width=True, height=(len(pivot_sum_no_filter) + 1) * 35 + 3)


# –í–∫–ª–∞–¥–∫–∞ "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"
with tabs[4]:
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ö–æ–ª-–≤–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –ø–µ—Ä–∏–æ–¥—É")
    filtered_df = sales_df[~sales_df['–∏—Å—Ç–æ—á–Ω–∏–∫'].isin(['–ü–µ—Ä–≤–∏—á–∫–∞ –º–∏–Ω—É—Å', '–ü–µ—Ä–≤–∏—á–∫–∞'])].copy()
    filtered_df['–ø–µ—Ä–∏–æ–¥'] = pd.Categorical(filtered_df['–ø–µ—Ä–∏–æ–¥'], categories=month_order, ordered=True)
    filtered_df['–∫–æ–ª-–≤–æ'] = pd.to_numeric(filtered_df['–∫–æ–ª-–≤–æ'], errors='coerce').fillna(0)
    used_months = sorted(
        filtered_df[filtered_df['–∫–æ–ª-–≤–æ'] > 0]['–ø–µ—Ä–∏–æ–¥'].dropna().unique(),
        key=lambda x: month_order.index(x)
    )
    period_labels = ['–í—Å–µ'] + used_months

    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="source_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    pivot_qty_by_source, pivot_sum_by_source = generate_source_pivots(sales_df, selected_period)

    styled_qty_by_source = pivot_qty_by_source.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_qty_by_source, use_container_width=True, height=(len(pivot_qty_by_source) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –°—É–º–º–∞ –°–ò–ü –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –ø–µ—Ä–∏–æ–¥—É")
    styled_sum_by_source = pivot_sum_by_source.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_sum_by_source, use_container_width=True, height=(len(pivot_sum_by_source) + 1) * 35 + 3)



# –í–∫–ª–∞–¥–∫–∞ "Eco Lec –ø—Ä–æ–¥–∞–∂–∏"
with tabs[5]:
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–æ '–ü–µ—Ä–≤–∏—á–∫–∞'")
    period_labels = ['–í—Å–µ'] + month_order
    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="period_slider_tab1"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    filtered_df, pivot_qty, pivot_sum, used_months = process_data(sales_df, selected_period)

    if filtered_df is not None and not pivot_qty.empty and not pivot_sum.empty:
        styled_qty = pivot_qty.style.format("{:,.0f}").set_properties(**{
            'text-align': 'right',
            'font-size': '14px'
        }).set_properties(**{
            'font-weight': 'bold',
            'background-color': '#f0f0f0'
        }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
            'font-weight': 'bold',
            'background-color': '#f0f0f0'
        }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

        styled_sum = pivot_sum.style.format("{:,.0f}").set_properties(**{
            'text-align': 'right',
            'font-size': '14px'
        }).set_properties(**{
            'font-weight': 'bold',
            'background-color': '#f0f0f0'
        }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
            'font-weight': 'bold',
            'background-color': '#f0f0f0'
        }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

        st.markdown("### –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        st.dataframe(styled_qty, use_container_width=True, height=(len(pivot_qty) + 1) * 35 + 3)

        st.markdown("### –°—É–º–º–∞")
        st.dataframe(styled_sum, use_container_width=True, height=(len(pivot_sum) + 1) * 35 + 3)

    else:
        st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

# –í–∫–ª–∞–¥–∫–∞ "–†–µ–≥–∏–æ–Ω—ã"
with tabs[6]:
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")

    # –í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫–∞
    value_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å",
        options=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞ –°–ò–ü"],
        key="region_value_type_radio",
        horizontal=True  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
    )
    value_column = '–∫–æ–ª-–≤–æ' if value_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" else '–°—É–º–º–∞ –°–ò–ü'

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±—Ä–∞–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è
    if value_column not in sales_df.columns:
        st.error(f"–ö–æ–ª–æ–Ω–∫–∞ '{value_column}' –≤—ñ–¥—Å—É—Ç–Ω—è –≤ –∞—Ä–∫—É—à—ñ '–ü—Ä–æ–¥–∞–∂–∏'. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {sales_df.columns.tolist()}")
        st.stop()

    # –í–∏–±—ñ—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    filtered_df = sales_df[~sales_df['–∏—Å—Ç–æ—á–Ω–∏–∫'].isin(['–ü–µ—Ä–≤–∏—á–∫–∞', '–ü–µ—Ä–≤–∏—á–∫–∞ –º–∏–Ω—É—Å'])].copy()
    filtered_df['–ø–µ—Ä–∏–æ–¥'] = pd.Categorical(filtered_df['–ø–µ—Ä–∏–æ–¥'], categories=month_order, ordered=True)
    filtered_df[value_column] = pd.to_numeric(filtered_df[value_column], errors='coerce').fillna(0)
    used_months = sorted(
        filtered_df[filtered_df[value_column] > 0]['–ø–µ—Ä–∏–æ–¥'].dropna().unique(),
        key=lambda x: month_order.index(x)
    )
    period_labels = ['–í—Å–µ'] + used_months

    if not used_months:
        st.warning(f"–ù–µ–º–∞—î –Ω–µ–Ω—É–ª—å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ '{value_type}' —É –∞—Ä–∫—É—à—ñ '–ü—Ä–æ–¥–∞–∂–∏'.")
        st.stop()

    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="region_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    try:
        pivot_table = generate_region_period_pivot(sales_df, selected_period, value_column=value_column)
    except KeyError as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö: {e}")
        st.stop()

    # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
    def highlight_tashkent(df):
        styles = pd.DataFrame('', index=df.index, columns=df.columns)
        for row in df.index:
            if row.startswith('–¢–∞—à–∫–µ–Ω—Ç –æ–±–ª–∞—Å—Ç—å'):
                for col in df.columns:
                    if col != '–ò—Ç–æ–≥–æ':
                        styles.at[row, col] = 'background-color: #ADD8E6'
            elif row.startswith('–¢–∞—à–∫–µ–Ω—Ç'):
                for col in df.columns:
                    if col != '–ò—Ç–æ–≥–æ':
                        styles.at[row, col] = 'background-color: #90EE90'
        return styles

    if not pivot_table.empty:
        styled_table = pivot_table.style.format("{:,.0f}", na_rep='').apply(
            highlight_tashkent, axis=None
        ).set_properties(**{
            'text-align': 'right',
            'font-size': '14px'
        }).set_properties(**{
            'font-weight': 'bold',
            'background-color': '#f0f0f0'
        }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
            'font-weight': 'bold',
            'background-color': '#f0f0f0'
        }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

        st.markdown(f"### {value_type}")
        st.dataframe(styled_table, use_container_width=True, height=(len(pivot_table) + 1) * 35 + 3)
    else:
        st.warning(f"–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ '{value_type}' —É –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")

# –†–µ—à—Ç–∞ –≤–∫–ª–∞–¥–æ–∫ (–¢–∞—à–∫–µ–Ω—Ç, –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ú–ü –æ–±—â–µ–µ) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∫–ª–∞–¥–∫–∞ "–¢–∞—à–∫–µ–Ω—Ç"
with tabs[7]:
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ö–æ–ª-–≤–æ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç)")
    period_labels = ['–í—Å–µ'] + month_order
    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="tashkent_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    pivot_tashkent = generate_tashkent_pivot(sales_df, selected_period)
    styled_tashkent = pivot_tashkent.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_tashkent, use_container_width=True, height=(len(pivot_tashkent) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –°—É–º–º–∞ –°–ò–ü –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç)")
    pivot_tashkent_sum_sip = generate_tashkent_sum_sip_pivot(sales_df, selected_period)
    styled_tashkent_sum_sip = pivot_tashkent_sum_sip.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_tashkent_sum_sip, use_container_width=True, height=(len(pivot_tashkent_sum_sip) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ö–æ–ª-–≤–æ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç, —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ 4)")
    pivot_tashkent_divided = generate_tashkent_divided_pivot(sales_df, selected_period)
    styled_tashkent_divided = pivot_tashkent_divided.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_tashkent_divided, use_container_width=True, height=(len(pivot_tashkent_divided) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –°—É–º–º–∞ –°–ò–ü –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç, —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ 4)")
    pivot_tashkent_sum_sip_divided = generate_tashkent_sum_sip_divided_pivot(sales_df, selected_period)
    styled_tashkent_sum_sip_divided = pivot_tashkent_sum_sip_divided.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_tashkent_sum_sip_divided, use_container_width=True, height=(len(pivot_tashkent_sum_sip_divided) + 1) * 35 + 3)

# –í–∫–ª–∞–¥–∫–∞ "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ)
with tabs[8]:
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ö–æ–ª-–≤–æ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)")
    period_labels = ['–í—Å–µ'] + month_order
    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="other_districts_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    pivot_other_districts = generate_other_districts_pivot(sales_df, selected_period)
    styled_other_districts = pivot_other_districts.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_other_districts, use_container_width=True, height=(len(pivot_other_districts) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –°—É–º–º–∞ –°–ò–ü –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)")
    pivot_other_districts_sum_sip = generate_other_districts_sum_sip_pivot(sales_df, selected_period)
    styled_other_districts_sum_sip = pivot_other_districts_sum_sip.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_other_districts_sum_sip, use_container_width=True, height=(len(pivot_other_districts_sum_sip) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ö–æ–ª-–≤–æ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ 4)")
    pivot_other_districts_divided = generate_other_districts_divided_pivot(sales_df, selected_period)
    styled_other_districts_divided = pivot_other_districts_divided.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_other_districts_divided, use_container_width=True, height=(len(pivot_other_districts_divided) + 1) * 35 + 3)

    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –°—É–º–º–∞ –°–ò–ü –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ 4)")
    pivot_other_districts_sum_sip_divided = generate_other_districts_sum_sip_divided_pivot(sales_df, selected_period)
    styled_other_districts_sum_sip_divided = pivot_other_districts_sum_sip_divided.style.format("{:,.0f}", na_rep='').set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
        'font-weight': 'bold',
        'background-color': '#f0f0f0'
    }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])

    st.dataframe(styled_other_districts_sum_sip_divided, use_container_width=True, height=(len(pivot_other_districts_sum_sip_divided) + 1) * 35 + 3)

# –í–∫–ª–∞–¥–∫–∞ "–ú–ü –æ–±—â–µ–µ"
with tabs[9]: 
    st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –ú–ü")
    filtered_df = sales_df.copy()
    filtered_df['–ø–µ—Ä–∏–æ–¥'] = pd.Categorical(filtered_df['–ø–µ—Ä–∏–æ–¥'], categories=month_order, ordered=True)
    used_months = sorted(filtered_df['–ø–µ—Ä–∏–æ–¥'].dropna().unique(), key=lambda x: month_order.index(x))
    period_labels = ['–í—Å–µ'] + used_months

    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="mp_period_slider"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]

    mp_list = sales_df['–ú–ü'].dropna().unique().tolist()
    mp_list.sort()
    mp_list.insert(0, "–í—Å–µ –ú–ü")

    selected_mp = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ú–ü",
        options=mp_list,
        key="mp_selectbox"
    )

    value_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å",
        options=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞ –°–ò–ü"],
        key="value_type_radio"
    )

    value_column = '–∫–æ–ª-–≤–æ' if value_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" else '–°—É–º–º–∞ –°–ò–ü'

    exclude_list = ['–ù–∏–ª—É—Ñ–∞—Ä', '–≤–∞–∫–∞–Ω—Ç –°–∞–º–∞—Ä–∫–∞–Ω–¥']
    mp_pivots = {}

    if selected_mp == "–í—Å–µ –ú–ü":
        for mp in mp_list[1:]:
            if mp in exclude_list:
                mp_pivots[mp] = calculate_excluded_mp_pivot(sales_df, mp, selected_period, value_column=value_column)
            else:
                mp_pivots[mp] = calculate_mp_pivot_with_tashkent(sales_df, mp, selected_period, value_column=value_column)

        for mp_name, pivot_table in mp_pivots.items():
            st.markdown(f"#### {mp_name}")
            if pivot_table.empty:
                st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            else:
                styled_table = pivot_table.style.format("{:,.0f}", na_rep='').set_properties(**{
                    'text-align': 'right',
                    'font-size': '14px'
                }).set_properties(**{
                    'font-weight': 'bold',
                    'background-color': '#f0f0f0'
                }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
                    'font-weight': 'bold',
                    'background-color': '#f0f0f0'
                }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])
                st.dataframe(styled_table, use_container_width=True, height=(len(pivot_table) + 1) * 35 + 3)
    else:
        if selected_mp in exclude_list:
            pivot_table = calculate_excluded_mp_pivot(sales_df, selected_mp, selected_period, value_column=value_column)
        else:
            pivot_table = calculate_mp_pivot_with_tashkent(sales_df, selected_mp, selected_period, value_column=value_column)

        st.markdown(f"#### –ú–ü: {selected_mp}")
        if pivot_table.empty:
            st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        else:
            styled_table = pivot_table.style.format("{:,.0f}", na_rep='').set_properties(**{
                'text-align': 'right',
                'font-size': '14px'
            }).set_properties(**{
                'font-weight': 'bold',
                'background-color': '#f0f0f0'
            }, subset=pd.IndexSlice['–ò—Ç–æ–≥–æ', :]).set_properties(**{
                'font-weight': 'bold',
                'background-color': '#f0f0f0'
            }, subset=pd.IndexSlice[:, '–ò—Ç–æ–≥–æ'])
            st.dataframe(styled_table, use_container_width=True, height=(len(pivot_table) + 1) * 35 + 3)

with tabs[10]:
    st.markdown("### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    required_columns = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', '–ø–µ—Ä–∏–æ–¥', '—Ä–∞–π–æ–Ω', '–∫–æ–ª-–≤–æ', '–°—É–º–º–∞ –°–ò–ü']
    missing_columns = [col for col in required_columns if col not in sales_df.columns]
    if missing_columns:
        st.error(f"–£ –∞—Ä–∫—É—à—ñ '–ü—Ä–æ–¥–∞–∂–∏' –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        st.stop()
    
    # –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    sales_df['–∫–æ–ª-–≤–æ'] = pd.to_numeric(sales_df['–∫–æ–ª-–≤–æ'], errors='coerce').fillna(0)
    sales_df['–°—É–º–º–∞ –°–ò–ü'] = pd.to_numeric(sales_df['–°—É–º–º–∞ –°–ò–ü'], errors='coerce').fillna(0)
    
    # –í–∏–±—ñ—Ä –ø–æ–∫–∞–∑–Ω–∏–∫–∞
    value_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å",
        options=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞ –°–ò–ü"],
        key="district_value_type_radio_10",
        horizontal=True
    )
    value_column = '–∫–æ–ª-–≤–æ' if value_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" else '–°—É–º–º–∞ –°–ò–ü'
    
    # –í–∏–±—ñ—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    filtered_df = sales_df.copy()
    filtered_df['–ø–µ—Ä–∏–æ–¥'] = pd.Categorical(filtered_df['–ø–µ—Ä–∏–æ–¥'], categories=month_order, ordered=True)
    filtered_df[value_column] = pd.to_numeric(filtered_df[value_column], errors='coerce').fillna(0)
    
    used_months = sorted(
        filtered_df[filtered_df[value_column] > 0]['–ø–µ—Ä–∏–æ–¥'].dropna().unique(),
        key=lambda x: month_order.index(x)
    )
    period_labels = ['–í—Å–µ'] + used_months
    
    if not used_months:
        st.warning(f"–ù–µ–º–∞—î –Ω–µ–Ω—É–ª—å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ '{value_type}' —É –∞—Ä–∫—É—à—ñ '–ü—Ä–æ–¥–∞–∂–∏'.")
        st.stop()
    
    period_range = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        options=period_labels,
        value=(period_labels[0], period_labels[-1]),
        key="district_period_slider_10"
    )
    start_period, end_period = period_range
    if start_period == '–í—Å–µ':
        selected_period = None
    else:
        start_idx = period_labels.index(start_period)
        end_idx = period_labels.index(end_period)
        selected_period = period_labels[start_idx:end_idx + 1]
    
    # –í–∏–±—ñ—Ä –ú–ü
    mp_list = list(mp_district_mapping.keys())
    mp_list.insert(0, "–í—Å–µ –ú–ü")
    selected_mp = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ú–ü",
        options=mp_list,
        key="district_mp_selectbox_10"
    )
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    sns.set_context("notebook", font_scale=0.8)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç
    if selected_mp == "–í—Å–µ –ú–ü":
        for mp, districts in mp_district_mapping.items():
            st.markdown(
                f'<h2 style="font-size: 48px;">{mp}</h2>',
                unsafe_allow_html=True
            )
            available_districts = [d for d in districts if d in sales_df['—Ä–∞–π–æ–Ω'].values]
            if not available_districts:
                st.write("–ñ–æ–¥–µ–Ω —Ä–∞–π–æ–Ω —Ü—å–æ–≥–æ –ú–ü –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –¥–∞–Ω–∏—Ö.")
                continue
            
            pivot_table = calculate_district_heatmap(sales_df, available_districts, selected_period, value_column=value_column)
            
            if pivot_table.empty:
                st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            else:
                plt.figure(figsize=(10, max(2, len(pivot_table) * 0.3)))
                sns.heatmap(
                    pivot_table,
                    annot=True,
                    fmt='.0f',
                    cmap='YlOrRd',
                    cbar_kws={'label': value_type},
                    linewidths=0.5,
                    annot_kws={'size': 8},
                    square=False
                )
                plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {mp} ({value_type})')
                plt.xlabel('–ü–µ—Ä–∏–æ–¥')
                plt.ylabel('–†–∞–π–æ–Ω')
                plt.tight_layout()
                
                buf = io.BytesIO()
                plt.savefig(buf, format='png', bbox_inches='tight')
                buf.seek(0)
                st.image(buf, use_container_width=True)
                plt.close()
    else:
        st.markdown(
            f'<h2 style="font-size: 48px;">{selected_mp}</h2>',
            unsafe_allow_html=True
        )
        districts = mp_district_mapping.get(selected_mp, [])
        available_districts = [d for d in districts if d in sales_df['—Ä–∞–π–æ–Ω'].values]
        if not available_districts:
            st.write("–ñ–æ–¥–µ–Ω —Ä–∞–π–æ–Ω —Ü—å–æ–≥–æ –ú–ü –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –¥–∞–Ω–∏—Ö.")
        else:
            pivot_table = calculate_district_heatmap(sales_df, available_districts, selected_period, value_column=value_column)
            
            if pivot_table.empty:
                st.write("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            else:
                plt.figure(figsize=(6, max(2, len(pivot_table) * 0.3)))
                sns.heatmap(
                    pivot_table,
                    annot=True,
                    fmt='.0f',
                    cmap='YlOrRd',
                    cbar_kws={'label': value_type},
                    linewidths=0.5,
                    annot_kws={'size': 8},
                    square=False
                )
                plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {selected_mp} ({value_type})')
                plt.xlabel('–ü–µ—Ä–∏–æ–¥')
                plt.ylabel('–†–∞–π–æ–Ω')
                plt.tight_layout()
                
                buf = io.BytesIO()
                plt.savefig(buf, format='png', bbox_inches='tight')
                buf.seek(0)
                st.image(buf, use_container_width=True)
                plt.close()